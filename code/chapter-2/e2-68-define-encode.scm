(define (encode message tree)
  (if (null? message)
    '()
    (append (encode-symbol (car message) tree)
            (encode (cdr message) tree))))

(define (encode-symbol symbol tree)
  (cond ((leaf? tree) '())
    ((element-of-set? symbol (symbols tree))
      (let ((left (left-branch tree))
         (right (right-branch tree)))
        (if (element-of-set? symbol (symbols left))
          (cons 0 (encode-symbol symbol left))
          (cons 1 (encode-symbol symbol right)))))
    (else (error "bad symbol " symbol))))

(define (element-of-set? x set)
  (cond ((null? set) #f)
    ((equal? (car set) x) #t)
    (else (element-of-set? x (cdr set)))))